// Copyright the Hyperledger Fabric contributors. All rights reserved.
//
// SPDX-License-Identifier: Apache-2.0

syntax = "proto3";

option go_package = "github.com/hyperledger/fabric-protos-go/orderer/mirbft";
option java_package = "org.hyperledger.fabric.protos.orderer.mirbft";

package mirbft;

// ConfigMetadata is serialized and set as the value of ConsensusType.Metadata in
// a channel configuration when the ConsensusType.Type is set "mirbft".
message ConfigMetadata {
    repeated Consenter consenters = 1;
    Options options = 2;
}

// Consenter represents a consenting node (i.e. replica).
message Consenter {
    string host = 1;
    uint32 port = 2;
    bytes client_tls_cert = 3;
    bytes server_tls_cert = 4;
}

// Options to be specified for all the hyperledger-labs/mirbft nodes. These can be modified on a
// per-channel basis.
message Options {

    // HeartbeatTicks is the number of ticks before a heartbeat is emitted
    // by a leader.
    uint32 HeartbeatTicks = 1;

    // SuspectTicks is the number of ticks a bucket may not progress before
    // the node suspects the epoch has gone bad.
    uint32 SuspectTicks = 2;

    // NewEpochTimeoutTicks is the number of ticks a replica will wait until
    // it suspects the epoch leader has failed.  This value must be greater
    // than 1, as rebroadcast ticks are computed as half this value.
    uint32 NewEpochTimeoutTicks = 3;

    // BufferSize is the total size of messages which can be held by the state
    // machine, pending application, for each node.  This is necessary because
    // there may be dependencies between messages (for instance, until a checkpoint
    // result is computed, watermarks cannot advance).  This should be set
    // to a minimum of a few MB.
    uint32 BufferSize = 4;

}
